import { curry } from './curry';
import { ArrayCallback, ArrayContainer } from '../shared/types/Array';

function indexByImpl<T, K extends PropertyKey>(callbackFn: ArrayCallback<T, K>, array: ArrayContainer<T>): Record<K, T> {
  return array.reduce(
    (acc, item, index) => {
      const key = callbackFn(item, index, array);
      acc[key] = item;
      return acc;
    },
    {} as Record<K, T>
  );
}

/**
 * Creates an object from an array by using the result of the callbackFn function as the key
 *
 * @category Array
 * @param callbackFn - The function to generate the key for each element
 * @param array - The array to convert to an object
 * @returns Returns an object with keys generated by callbackFn and values from the array
 * @example
 * const array = [
 *   { id: 1, name: 'Alice' },
 *   { id: 2, name: 'Bob' },
 *   { id: 3, name: 'Charlie' }
 * ];
 * indexBy(item => item.id, array);
 * // => { 1: { id: 1, name: 'Alice' }, 2: { id: 2, name: 'Bob' }, 3: { id: 3, name: 'Charlie' } }
 */
export const indexBy = curry(indexByImpl) as {
  <T, K extends PropertyKey>(callbackFn: ArrayCallback<T, K>, array: ArrayContainer<T>): Record<K, T>;
  <T, K extends PropertyKey>(callbackFn: ArrayCallback<T, K>): <T2 extends T>(array: ArrayContainer<T2>) => Record<K, T2>;
};
